@using Service.Web
@using Model.Web
@using Model
@using System.Text.RegularExpressions;
@using Model.Dto104;

@page "/"
@inject IJobSeekerService jobSeekerService
@inject IJSRuntime jsRuntime

<PageTitle>職缺</PageTitle>

@*<SurveyPrompt Title="How is Blazor working for you?" />*@
<div style="max-width:95vw">

    <div class="row">
        @if (CompanyInfos != null && CompanyInfos.Companies != null)
        {
            foreach (var company in CompanyInfos.Companies)
            {
                <div class="col-12 p-1">
                    <div class="border border-1 p-2" style="min-height:100px">
                        <div class="d-flex">
                            <a class="btn btn-outline-primary" target="_blank" href="@company.CompanyPageUrl">@company.Name</a>
                            <p class="btn btn-outline-dark m-0 ms-2 disabled">@company.SourceFrom</p>
                            <p class="btn btn-outline-info m-0 ms-2 disabled">更新次數 : @company.UpdateCount</p>
                        </div>
                        <div class="mt-2">
                            <button id="btn-jobs" class="btn btn-info text-white ms-2" data-bs-toggle="modal" data-bs-target="#jobsModal" @onclick=@(()=>GetJobs(company))>職缺</button>
                            @if (company.NeedToRead)
                            {
                                <button id="read-comp" class="btn btn-outline-success ms-2" @onclick=@(()=>ReadedAllJobs(company))>已讀</button>
                            }
                            @if (!company.IsIgnore)
                            {
                                <button id="ignore-comp" class="btn btn-danger ms-2" @onclick=@(()=> IgnoreCompany(company))>Ignore</button>
                            }

                        </div>
                        <div class="mt-2">
                            <h3>介紹</h3>
                            <p>@company.Profile</p>
                        </div>
                        <div class="mt-2">
                            <h3>主要服務</h3>
                            <p>@company.Product</p>
                        </div>
                        <div class="mt-2">
                            <h3>福利</h3>
                            <p>@company.Welfare</p>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Modal -->
    <div class="modal fade" id="jobsModal" tabindex="-1" aria-labelledby="jobsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <div>
                        <div>
                            <a href="@ModalCompany?.CompanyPageUrl" target="_blank" class="btn btn-outline-primary">@ModalCompany?.Name</a>
                            <p class="btn btn-outline-dark m-0 ms-2 disabled">@ModalCompany?.SourceFrom</p>

                        </div>
                        <div class="mt-2">

                            @if (ModalCompany != null)
                            {
                                <button type="button" class="ms-1 btn btn-outline-success" data-bs-dismiss="modal" @onclick=@(()=> ReadedAllJobs(ModalCompany))>已讀</button>
                                <button type="button" class="ms-1 btn btn-danger" data-bs-dismiss="modal" @onclick=@(()=> IgnoreCompany(ModalCompany))>Ignore</button>
                            }

                            <p class="btn btn-outline-info m-0 ms-1 disabled">更新次數 : @ModalCompany?.UpdateCount</p>
                        </div>
                    </div>

                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (JobInfos != null && JobInfos.Jobs != null)
                    {
                        foreach (var job in JobInfos.Jobs)
                        {
                            <h3>
                                <a href="@job.JobUrl" target="_blank" class="btn btn-primary">@job.Name</a>
                            </h3>
                            <div>
                                @if (!job.HaveRead)
                                {
                                    <button id="read-job" class="btn btn-outline-success ms-2" @onclick=@(()=> ReadedJob(job))>已讀</button>
                                }
                                @if (!job.Ignore)
                                {
                                    <button id="ignore-job" class="btn btn-danger ms-2" @onclick=@(()=> IgnoreJob(job))>Ignore</button>
                                }
                                <p class="btn btn-outline-info m-0 ms-2 disabled">更新次數 : @job.UpdateCount</p>

                            </div>
                            <div>
                                @job.JobPlace @job.Salary
                            </div>
                            <p>@((MarkupString)(job.WorkContent ?? ""))</p>
                            <p>@((MarkupString)(job.OtherRequirement ?? ""))</p>
                            <hr />
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-outline-success" data-bs-dismiss="modal" @onclick=@(()=> ReadedAllJobs(ModalCompany))>已讀</button>
                    <a href="@ModalCompany?.CompanyPageUrl" target="_blank" class="btn btn-outline-primary">公司</a>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick=@(()=> IgnoreCompany(ModalCompany))>Ignore</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private JobSeekerHomePageModel? CompanyInfos;
    private JobSeekerJobModal? JobInfos;
    private CompanyModel? ModalCompany;

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Take { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CompanyInfos = await jobSeekerService.GetCompanies(false, Take ?? 100);

        await base.OnInitializedAsync();
    }

    private async Task GetJobs(CompanyModel? company)
    {
        JobInfos = null;

        if (company == null || company.Id == null)
            return;

        ModalCompany = company;

        JobInfos = await jobSeekerService.GetJobs(company.Id, false);

        if (JobInfos == null || JobInfos.Jobs == null)
        {
            return;
        }

        foreach (var job in JobInfos.Jobs)
        {
            foreach (var key in Parameters.KeywordsFilters)
            {
                string replacementText = $"<span style=\"color: red;\">{key.ToUpper()}</span>";

                job.WorkContent = job.WorkContent?.Replace(key, replacementText, StringComparison.OrdinalIgnoreCase);
                job.OtherRequirement = job.OtherRequirement?.Replace(key, replacementText, StringComparison.OrdinalIgnoreCase);
            }
        }
    }

    private void ReadedAllJobs(CompanyModel? company)
    {
        IgnoreOrReadedCompany(company, readedCompany: true);
    }

    private void IgnoreCompany(CompanyModel? company)
    {
        IgnoreOrReadedCompany(company, ignoreCompany: true);
    }

    private void IgnoreOrReadedCompany(CompanyModel? company, bool readedCompany = false, bool ignoreCompany = false)
    {

        if (company == null || string.IsNullOrWhiteSpace(company.Id))
            return;

        if (readedCompany)
        {
            company.NeedToRead = false;
            _ = jobSeekerService.ReadedAllJobs(company.Id);
        }

        if (ignoreCompany)
        {
            company.IsIgnore = true;
            _ = jobSeekerService.IgnoreCompany(company.Id);
        }
        if (JobInfos != null && JobInfos.Jobs != null)
        {
            foreach (var item in JobInfos.Jobs)
                item.HaveRead = true;
        }

        SortCompany();
    }

    private void SortCompany()
    {
        if (CompanyInfos == null || CompanyInfos.Companies == null)
            return;

        CompanyInfos.Companies = CompanyInfos.Companies
                                    .OrderBy(x => x.IsIgnore)
                                    .ThenByDescending(x => x.NeedToRead)
                                    .ThenBy(x => x.Id)
                                    .ToArray();
    }

    private void SortJobs()
    {
        if (JobInfos == null || JobInfos.Jobs == null)
            return;

        JobInfos.Jobs = JobInfos.Jobs.OrderBy(x => x.Ignore)
            .ThenBy(x => x.HaveRead)
            .ThenBy(x => x.JobId)
            .ToArray();

    }

    private void ReadedJob(JobModel? job)
    {
        if (job == null || string.IsNullOrWhiteSpace(job.JobId))
            return;

        job.HaveRead = true;
        SortJobs();
        _ = jobSeekerService.ReadedJob(job.JobId);
    }

    private void IgnoreJob(JobModel? job)
    {
        if (job == null || string.IsNullOrWhiteSpace(job.JobId))
            return;

        job.Ignore = true;
        SortJobs();
        _ = jobSeekerService.IgnoreJob(job.JobId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntime.InvokeVoidAsync("registerShortcut", DotNetObjectReference.Create(this));

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AutoGetNewCompAndJobData()
    {
        if (JobInfos == null || JobInfos.Jobs == null)
            return;

        if (JobInfos.Jobs.Any(x => !x.Ignore && !x.HaveRead))
            return;

        foreach (var job in JobInfos.Jobs)
        {
            job.HaveRead = true;
            job.Ignore = true;
        }

        var company = CompanyInfos?.Companies?.FirstOrDefault(x => x.Id == JobInfos.CompanyId);

        if (company == null)
            return;

        company.NeedToRead = false;

        SortCompany();

        ModalCompany = CompanyInfos?.Companies?.FirstOrDefault();
        await GetJobs(ModalCompany);
    }

    [JSInvokable]
    public async Task ReloadJobs()
    {
        await GetJobs(CompanyInfos?.Companies?[0]);
    }

    [JSInvokable]
    public async Task ReadFirstJob()
    {
        var job = JobInfos?.Jobs?.FirstOrDefault();
        if (job == null || string.IsNullOrWhiteSpace(job.JobId))
            return;

        await jobSeekerService.ReadedJob(job.JobId);
        job.HaveRead = true;
        SortJobs();

        await AutoGetNewCompAndJobData();
        StateHasChanged();

    }

    [JSInvokable]
    public async Task IgnoreFirstJob()
    {
        var job = JobInfos?.Jobs?.FirstOrDefault();
        if (job == null || string.IsNullOrWhiteSpace(job.JobId))
            return;

        await jobSeekerService.IgnoreJob(job.JobId);
        job.Ignore = true;
        SortJobs();

        await AutoGetNewCompAndJobData();
        StateHasChanged();

    }

    [JSInvokable]
    public async Task ReadCompany()
    {
        if (ModalCompany != null)
        {
            ModalCompany.NeedToRead = false;
            if (!string.IsNullOrWhiteSpace(ModalCompany.Id))
            {
                await jobSeekerService.ReadedAllJobs(ModalCompany.Id);
            }
        }

        if (JobInfos != null && JobInfos.Jobs != null)
        {
            foreach (var job in JobInfos.Jobs)
                job.HaveRead = true;
        }
        SortCompany();
        await AutoGetNewCompAndJobData();
        StateHasChanged();
    }

    [JSInvokable]
    public async Task IgnoreCompany()
    {
        if (ModalCompany != null)
        {
            ModalCompany.IsIgnore = true;
            if (!string.IsNullOrWhiteSpace(ModalCompany.Id))
            {
                await jobSeekerService.IgnoreCompany(ModalCompany.Id);
            }
        }

        if (JobInfos != null && JobInfos.Jobs != null)
        {
            foreach (var job in JobInfos.Jobs)
                job.HaveRead = true;
        }
        SortCompany();
        await AutoGetNewCompAndJobData();
        StateHasChanged();
    }
}