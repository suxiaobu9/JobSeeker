@using Service.Web
@using Model.Web
@using Model
@using System.Text.RegularExpressions;
@using Model.Dto104;

@page "/"
@inject IJobSeekerService jobSeekerService
@inject IJSRuntime jsRuntime
@inject ILogger<Index> logger

<PageTitle>職缺</PageTitle>
<div class="row m-2" style="min-height:98vh">
    @if (Company != null && Company.Jobs != null)
    {
        <div class="col-6 border border-1 p-2">
            <div>
                <a class="btn btn-outline-primary" href="@Company.CompanyPageUrl" target="_blank">@Company.Name</a>
                <button class="btn btn-outline-dark disabled">@Company.SourceFrom</button>
                <button class="btn btn-outline-info disabled">更新次數 : @Company.UpdateCount</button>
            </div>
            <div class="mt-2">
                @if (Company.NeedToRead)
                {
                    <button class="btn btn-outline-success" @onclick=@ReadAllJobs>已讀</button>
                }
                @if (!Company.IsIgnore)
                {
                    <button class="btn btn-danger ms-1" @onclick=@IgnoreCompany>Ignore</button>
                }
            </div>
            <div class="mt-2">
                <h3>介紹</h3>
                <p>@Company.Profile</p>
            </div>
            <div class="mt-2">
                <h3>主要服務</h3>
                <p>@Company.Product</p>
            </div>
            <div class="mt-2">
                <h3>福利</h3>
                <p>@Company.Welfare</p>
            </div>
        </div>
        <div class="col-6">
            @foreach (var job in Company.Jobs)
            {

                <div class="border border-1 p-2">

                    <div>
                        <a class="btn btn-primary" target="_blank" href="@job.JobUrl">@job.Name</a>
                        <button class="btn btn-outline-info disabled">更新次數 : @job.UpdateCount</button>
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-outline-danger disabled">@job.JobPlace</button>
                        <button class="btn btn-dark disabled">@job.Salary</button>
                    </div>
                    <div class="mt-2">
                        @if (!job.HaveRead)
                        {
                            <button class="btn btn-success" @onclick=@(()=> ReadJob(job))>已讀</button>
                        }
                        @if (!job.Ignore)
                        {
                            <button class="btn btn-danger ms-1" @onclick=@(()=> IgnoreJob(job))>Ignore</button>
                        }
                    </div>
                    <div class="mt-2">
                        <p>@((MarkupString)(job.WorkContent ?? ""))</p>
                        <p>@((MarkupString)(job.OtherRequirement ?? ""))</p>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private CompanyViewModel? Company;
    private int UnReadCompanyCount;

    protected override async Task OnInitializedAsync()
    {
        await GetCompanAndJobs();

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// 取得一筆公司資訊以及職缺
    /// </summary>
    /// <returns></returns>
    private async Task GetCompanAndJobs()
    {
        Company = await jobSeekerService.GetCompany();
        UnReadCompanyCount = await jobSeekerService.GetUnReadCompanyCount();

        if (Company?.Jobs == null)
            return;

        foreach (var job in Company.Jobs)
        {
            foreach (var key in Parameters.KeywordsFilters)
            {
                string replacementText = $"<span style=\"color: red;\">{key.ToUpper()}</span>";

                job.WorkContent = job.WorkContent?.Replace(key, replacementText, StringComparison.OrdinalIgnoreCase);
                job.OtherRequirement = job.OtherRequirement?.Replace(key, replacementText, StringComparison.OrdinalIgnoreCase);
            }
        }
        StateHasChanged();

    }

    /// <summary>
    /// 已讀所有工作
    /// </summary>
    [JSInvokable]
    public async Task ReadAllJobs()
    {
        if (Company == null)
        {
            logger.LogWarning($"{nameof(Index)} ReadAllJobs Company get null.");
            return;
        }
        Company.NeedToRead = false;
        await jobSeekerService.ReadAllJobs(Company);
        await GetCompanAndJobs();
    }

    /// <summary>
    /// 忽略公司
    /// </summary>
    [JSInvokable]
    public async Task IgnoreCompany()
    {
        if (Company == null)
        {
            logger.LogWarning($"{nameof(Index)} ReadAllJobs Company get null.");
            return;
        }
        Company.IsIgnore = true;
        await jobSeekerService.IgnoreCompany(Company);
        await GetCompanAndJobs();
    }

    /// <summary>
    /// 已讀工作
    /// </summary>
    /// <param name="job"></param>
    /// <returns></returns>
    private async Task ReadJob(JobViewModel job)
    {
        job.HaveRead = true;
        await jobSeekerService.ReadJob(job);
        SortJob(job);
        if (NeedToReload())
            await GetCompanAndJobs();
    }

    /// <summary>
    /// 忽略工作
    /// </summary>
    /// <param name="job"></param>
    /// <returns></returns>
    private async Task IgnoreJob(JobViewModel job)
    {
        job.Ignore = true;
        await jobSeekerService.IgnoreJob(job);
        SortJob(job);
        if (NeedToReload())
            await GetCompanAndJobs();
    }

    /// <summary>
    /// 排序工作
    /// </summary>
    /// <param name="job"></param>
    private void SortJob(JobViewModel job)
    {
        if (Company?.Jobs == null)
            return;

        var tmp = new JobViewModel[Company.Jobs.Length];

        var i = 0;
        foreach (var item in Company.Jobs)
        {
            if (item.JobId == job.JobId)
            {
                tmp[Company.Jobs.Length - 1] = item;
                continue;
            }

            tmp[i++] = item;
        }
        Company.Jobs = tmp;
        StateHasChanged();
    }

    /// <summary>
    /// 是否需要重新取得公司與職缺
    /// </summary>
    /// <returns></returns>
    private bool NeedToReload()
    {
        if (Company?.Jobs == null)
            return true;

        if (Company.Jobs.Any(x => !x.Ignore && !x.HaveRead))
            return false;

        return true;
    }

    /// <summary>
    /// 已讀第一筆工作
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public async Task ReadFirstJob()
    {
        if (Company?.Jobs == null || Company.Jobs.Length == 0)
            return;

        await ReadJob(Company.Jobs[0]);
    }

    /// <summary>
    /// 忽略第一筆工作
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public async Task IgnoreFirstJob()
    {
        if (Company?.Jobs == null || Company.Jobs.Length == 0)
            return;
        await IgnoreJob(Company.Jobs[0]);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntime.InvokeVoidAsync("registerShortcut", DotNetObjectReference.Create(this));

        await base.OnAfterRenderAsync(firstRender);
    }
}